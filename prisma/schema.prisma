// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  displayName  String
  bio          String?  @db.Text
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  messages     Message[]     @relation("UserMessages")
  participants Participant[]

  @@index([email])
}

model Conversation {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastMessageAt DateTime?
  isGroup       Boolean   @default(false)
  pairKey       String?   @unique

  messages     Message[]
  participants Participant[]

  @@index([lastMessageAt])
}

model Participant {
  id             String    @id @default(uuid())
  userId         String
  conversationId String

  isArchived     Boolean   @default(false)
  isFavourite    Boolean   @default(false)
  isMuted        Boolean   @default(false)
  isBlocked      Boolean   @default(false)

  lastReadAt     DateTime?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([conversationId, userId])
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  senderId       String
  body           String

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
}
